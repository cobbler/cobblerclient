package cobblerclient

// Sync the system.
// Returns an error if anything went wrong
func (c *Client) Sync() error {
	_, err := c.Call("sync", c.Token)
	return err
}

// BackgroundSync runs a "cobbler sync" in asynchronously in the background. The returned string is the event id
// which can be used to query the GetEventLog endpoint.
func (c *Client) BackgroundSync(options BackgroundSyncOptions) (string, error) {
	res, err := c.Call("background_sync", options, c.Token)
	if err != nil {
		return "", err
	} else {
		return res.(string), err
	}
}

// BackgroundSyncSystems runs the "cobbler syncsystems" action which only executes a Cobbler sync for a specific
// subset of systems.
func (c *Client) BackgroundSyncSystems(options BackgroundSyncSystemsOptions) (string, error) {
	res, err := c.Call("background_syncsystems", options, c.Token)
	if err != nil {
		return "", err
	} else {
		return res.(string), err
	}
}

// Check runs the "cobbler check" action and list all possible points for improvements on server side as a
// return value.
func (c *Client) Check() (*[]string, error) {
	var checks []string
	result, err := c.Call("check", c.Token)

	for _, check := range result.([]interface{}) {
		checks = append(checks, check.(string))
	}

	return &checks, err
}

// BackgroundBuildiso builds an ISO file on the server. The return value is the task ID which is started on the
// server.
func (c *Client) BackgroundBuildiso(options BuildisoOptions) (string, error) {
	result, err := c.Call("background_buildiso", options, c.Token)
	if err != nil {
		return "", err
	} else {
		return result.(string), err
	}
}

// BackgroundAclSetup applies updated ACLs on the Cobbler system.
func (c *Client) BackgroundAclSetup(options AclSetupOptions) (string, error) {
	result, err := c.Call("background_aclsetup", options, c.Token)
	if err != nil {
		return "", err
	} else {
		return result.(string), err
	}
}

// BackgroundHardlink tries to save space inside the web directory through hardlinking identical files.
func (c *Client) BackgroundHardlink() (string, error) {
	result, err := c.Call("background_hardlink", map[string]string{}, c.Token)
	if err != nil {
		return "", err
	} else {
		return result.(string), err
	}
}

// BackgroundValidateAutoinstallFiles checks if the files generated by Cobbler are valid from a syntax perspective.
func (c *Client) BackgroundValidateAutoinstallFiles() (string, error) {
	result, err := c.Call("background_validate_autoinstall_files", map[string]string{}, c.Token)
	if err != nil {
		return "", err
	} else {
		return result.(string), err
	}
}

// BackgroundReplicate replicates the Cobbler server to the target defined in the arguments.
func (c *Client) BackgroundReplicate(options ReplicateOptions) (string, error) {
	result, err := c.Call("background_replicate", options, c.Token)
	if err != nil {
		return "", err
	} else {
		return result.(string), err
	}
}

// BackgroundImport runs an import locally on the server with the specified options.
func (c *Client) BackgroundImport(options BackgroundImportOptions) (string, error) {
	result, err := c.Call("background_import", options, c.Token)
	if err != nil {
		return "", err
	} else {
		return result.(string), err
	}
}

// BackgroundReposync runs a reposyonc asynchronous in the background on the server.
func (c *Client) BackgroundReposync(options BackgroundReposyncOptions) (string, error) {
	result, err := c.Call("background_reposync", options, c.Token)
	if err != nil {
		return "", err
	} else {
		return result.(string), err
	}
}

// BackgroundMkLoaders runs the mkloaders action on the server in the background.
func (c *Client) BackgroundMkLoaders() (string, error) {
	result, err := c.Call("background_mkloaders", map[string]string{}, c.Token)
	if err != nil {
		return "", err
	} else {
		return result.(string), err
	}
}
